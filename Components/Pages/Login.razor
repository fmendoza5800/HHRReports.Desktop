@page "/login"
@using HHRReports.Desktop.Services
@inject IDesktopAuthenticationService AuthService
@inject NavigationManager Navigation
@inject ILogger<Login> Logger

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>HHR Reports - Database Login</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label for="server" class="form-label">SQL Server</label>
                            <input id="server" class="form-control" @bind="loginModel.Server" placeholder="e.g., hhr-sql.database.windows.net" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="database" class="form-label">Database</label>
                            <input id="database" class="form-control" @bind="loginModel.Database" placeholder="e.g., HHRPoolData" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input id="username" class="form-control" @bind="loginModel.Username" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input id="password" type="password" class="form-control" @bind="loginModel.Password" />
                        </div>
                        
                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Connecting...</span>
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        // Set default values - can be loaded from config
        loginModel.Server = "hhr-sql.database.windows.net";
        loginModel.Database = "HHRPoolData";
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Attempting login for user: {Username}", loginModel.Username);
            
            var success = await AuthService.LoginAsync(
                loginModel.Username!, 
                loginModel.Password!, 
                loginModel.Server!, 
                loginModel.Database!);

            if (success)
            {
                Logger.LogInformation("Login successful, navigating to home");
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials and permissions.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login error");
            errorMessage = $"Connection failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required]
        public string? Server { get; set; }
        
        [Required]
        public string? Database { get; set; }
        
        [Required]
        public string? Username { get; set; }
        
        [Required]
        public string? Password { get; set; }
    }
}