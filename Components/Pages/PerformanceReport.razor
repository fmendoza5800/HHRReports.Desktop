@page "/performance-report"
@using HHRReports.Desktop.Models
@using HHRReports.Desktop.Services
@using Microsoft.JSInterop
@using Microsoft.Data.SqlClient
@implements IDisposable
@inject IPerformanceReportService PerformanceService
@inject ILogger<PerformanceReport> Logger
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<link href="css/performance-report.css" rel="stylesheet" />
<link href="css/timer.css" rel="stylesheet" />

<PageTitle>Performance Report</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Performance Report</h3>
    <div class="theme-selector">
        <label for="themeSelect" class="me-2">Theme:</label>
        <select id="themeSelect" class="form-select form-select-sm d-inline-block" style="width: auto;" value="@currentTheme" @onchange="OnThemeChanged">
            <option value="white">White</option>
            <option value="grey">Grey</option>
            <option value="black">Black</option>
        </select>
    </div>
</div>

<div class="container-fluid p-0 @($"theme-{currentTheme}")">
    <div class="row mb-3 align-items-end">
        <div class="col-auto">
            <label for="endDate" class="form-label mb-1">Date:</label>
            <input type="date" class="form-control" id="endDate" @bind="endDate" style="width: auto;">
        </div>
        <div class="col-auto">
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="LoadReport" disabled="@loading" style="min-width: 150px;">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Loading...</span>
                    }
                    else
                    {
                        <span>Generate Report</span>
                    }
                </button>
                @if (loading)
                {
                    <button class="btn btn-danger" @onclick="CancelLoad">
                        <span>Cancel</span>
                    </button>
                }
            </div>
        </div>
        <div class="col">
            @if (performanceReports != null && performanceReports.Any())
            {
                <div class="text-end">
                    <span class="badge bg-info text-dark fs-6">Found @performanceReports.Count records</span>
                    @if (performanceReports.Any(p => p.Date.HasValue))
                    {
                        <span class="badge bg-secondary fs-6 ms-2">Date Range: @performanceReports.Where(p => p.Date.HasValue).Min(p => p.Date).Value.ToString("MM/dd/yyyy") - @performanceReports.Where(p => p.Date.HasValue).Max(p => p.Date).Value.ToString("MM/dd/yyyy")</span>
                    }
                </div>
            }
        </div>
    </div>

    @if (loading)
    {
        <div class="row mt-4">
            <div class="col">
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" 
                         style="width: 100%">
                        Loading Data...
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row mt-4">
            <div class="col">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>Error:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
                </div>
            </div>
        </div>
    }

    @if (performanceReports != null && performanceReports.Any())
    {
        <div class="row mt-4">
            <div class="col">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-sm">
                        <thead>
                            <tr>
                                <th>Location</th>
                                <th>Terminal</th>
                                <th>Date</th>
                                <th>Gross Revenue</th>
                                <th>Net Revenue</th>
                                <th>Transactions</th>
                                <th>Avg Wager</th>
                                <th>Payout %</th>
                                <th>Hold %</th>
                                <th>Status</th>
                                <th>Operating Hours</th>
                                <th>Revenue/Hour</th>
                                <th>Category</th>
                                <th>Region</th>
                                <th>Tax Amount</th>
                                <th>Commission</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var report in performanceReports)
                            {
                                <tr>
                                    <td>@report.Location</td>
                                    <td>@report.Terminal</td>
                                    <td>@(report.Date?.ToString("MM/dd/yyyy") ?? "")</td>
                                    <td class="text-end">@report.GrossRevenue</td>
                                    <td class="text-end">@report.NetRevenue</td>
                                    <td class="text-end">@report.TransactionCount</td>
                                    <td class="text-end">@report.AverageWager</td>
                                    <td class="text-end">@report.PayoutPercentage</td>
                                    <td class="text-end">@report.HoldPercentage</td>
                                    <td>@report.Status</td>
                                    <td class="text-end">@report.OperatingHours</td>
                                    <td class="text-end">@report.RevenuePerHour</td>
                                    <td>@report.Category</td>
                                    <td>@report.Region</td>
                                    <td class="text-end">@report.TaxAmount</td>
                                    <td class="text-end">@report.CommissionAmount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-success" @onclick="ExportToExcel">
                    <i class="bi bi-file-earmark-excel"></i> Export to Excel
                </button>
            </div>
        </div>
    }
    
    @if (showTimer)
    {
        <div class="timer-container">
            @if (loading)
            {
                <div class="spinner"></div>
                <span class="timer-label">Executing:</span>
            }
            else
            {
                <span class="timer-label">@timerStatus</span>
            }
            <span class="timer-value">@elapsedTime</span>
        </div>
    }
</div>

@code {
    private List<HHRReports.Desktop.Models.PerformanceReport>? performanceReports;
    private bool loading = false;
    private string? errorMessage;
    private DateTime endDate = DateTime.Today;
    private string currentTheme = "white";
    private CancellationTokenSource? _cancellationTokenSource;
    private string? authToken;
    
    // Timer variables
    private bool showTimer = false;
    private string elapsedTime = "00:00:00";
    private string timerStatus = "Completed:";
    private System.Timers.Timer? executionTimer;
    private DateTime reportStartTime;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                currentTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedTheme") ?? "white";
                await JSRuntime.InvokeVoidAsync("applyTheme", currentTheme);
                
                // Get auth token from cookie
                authToken = await JSRuntime.InvokeAsync<string>("getCookie", "AuthToken");
                
                if (string.IsNullOrEmpty(authToken))
                {
                    Logger.LogWarning("No auth token found, redirecting to login");
                    Navigation.NavigateTo("/", true);
                }
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error during OnAfterRenderAsync");
            }
        }
    }

    private async Task LoadReport()
    {
        try
        {
            loading = true;
            errorMessage = null;
            performanceReports = null;
            showTimer = true;
            reportStartTime = DateTime.Now;
            StartTimer();
            StateHasChanged();

            _cancellationTokenSource = new CancellationTokenSource();

            Logger.LogInformation("Loading performance report for end date: {EndDate}", endDate);
            performanceReports = await PerformanceService.GetPerformanceReportsAsync(endDate, authToken, _cancellationTokenSource.Token);
            Logger.LogInformation("Performance report loaded successfully with {Count} records", performanceReports?.Count ?? 0);
            timerStatus = "Completed:";
        }
        catch (OperationCanceledException)
        {
            Logger.LogWarning("Performance report loading was cancelled");
            errorMessage = "Report generation was cancelled.";
            timerStatus = "Cancelled:";
        }
        catch (UnauthorizedAccessException ex)
        {
            Logger.LogWarning(ex, "Unauthorized access to performance report");
            errorMessage = ex.Message;
            timerStatus = "Unauthorized:";
            
            // Clear auth token and redirect to login
            await JSRuntime.InvokeVoidAsync("deleteCookie", "AuthToken");
            Navigation.NavigateTo("/", true);
        }
        catch (SqlException sqlEx)
        {
            Logger.LogError(sqlEx, "SQL error loading performance report");
            if (sqlEx.Number == 2812)
            {
                errorMessage = "The Performance Report stored procedure (usp_HHR_PerformanceReport) was not found in the database. Please contact your administrator.";
                timerStatus = "Not Found:";
            }
            else if (sqlEx.Number == 229)
            {
                errorMessage = "You do not have permission to execute the Performance Report. Please contact your administrator.";
                timerStatus = "Denied:";
            }
            else if (sqlEx.Number == -2)
            {
                errorMessage = "The report is taking longer than expected. Please try again or contact support if the issue persists.";
                timerStatus = "Timeout:";
            }
            else
            {
                errorMessage = $"Database error: {sqlEx.Message}";
                timerStatus = "Failed:";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading performance report");
            errorMessage = $"An error occurred: {ex.Message}";
            timerStatus = "Failed:";
        }
        finally
        {
            loading = false;
            StopTimer();
            // Keep showTimer as true to show the final time
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;
            StateHasChanged();
        }
    }

    private void CancelLoad()
    {
        Logger.LogInformation("Cancelling performance report load");
        _cancellationTokenSource?.Cancel();
    }

    private async Task OnThemeChanged(ChangeEventArgs e)
    {
        currentTheme = e.Value?.ToString() ?? "white";
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedTheme", currentTheme);
        await JSRuntime.InvokeVoidAsync("applyTheme", currentTheme);
    }

    private async Task ExportToExcel()
    {
        if (performanceReports == null || !performanceReports.Any())
            return;

        try
        {
            var csvContent = "Location,Terminal,Date,Gross Revenue,Net Revenue,Transactions,Avg Wager,Payout %,Hold %,Status,Operating Hours,Revenue/Hour,Category,Region,Tax Amount,Commission\n";
            
            foreach (var report in performanceReports)
            {
                csvContent += $"{report.Location},{report.Terminal},{report.Date?.ToString("MM/dd/yyyy") ?? ""}," +
                             $"{report.GrossRevenue ?? ""},{report.NetRevenue ?? ""}," +
                             $"{report.TransactionCount ?? ""},{report.AverageWager ?? ""}," +
                             $"{report.PayoutPercentage ?? ""},{report.HoldPercentage ?? ""}," +
                             $"{report.Status},{report.OperatingHours ?? ""}," +
                             $"{report.RevenuePerHour ?? ""},{report.Category},{report.Region}," +
                             $"{report.TaxAmount ?? ""},{report.CommissionAmount ?? ""}\n";
            }

            var fileName = $"PerformanceReport_{endDate:yyyyMMdd}.csv";
            var base64 = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(csvContent));
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting to Excel");
            errorMessage = $"Error exporting to Excel: {ex.Message}";
        }
    }

    private void StartTimer()
    {
        executionTimer?.Dispose();
        executionTimer = new System.Timers.Timer(100); // Update every 100ms
        executionTimer.Elapsed += (sender, e) =>
        {
            var elapsed = DateTime.Now - reportStartTime;
            elapsedTime = $"{elapsed.Hours:00}:{elapsed.Minutes:00}:{elapsed.Seconds:00}";
            InvokeAsync(StateHasChanged);
        };
        executionTimer.Start();
    }
    
    private void StopTimer()
    {
        executionTimer?.Stop();
        executionTimer?.Dispose();
        executionTimer = null;
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
        StopTimer();
    }
}