@page "/pool-details"
@implements IDisposable
@using HHRReports.Desktop.Models
@using HHRReports.Desktop.Services
@using OfficeOpenXml
@using OfficeOpenXml.Style
@using System.Drawing
@inject IPoolDetailService PoolService
@inject ILogger<PoolDetails> Logger
@inject IJSRuntime JSRuntime
@* Desktop version doesn't use HttpContext *@
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Pool Details Report</PageTitle>

<link href="css/timer.css" rel="stylesheet" />

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Pool Details Report</h3>
    <div class="theme-selector">
        <label for="themeSelect" class="me-2">Theme:</label>
        <select id="themeSelect" class="form-select form-select-sm d-inline-block" style="width: auto;" value="@currentTheme" @onchange="OnThemeChanged">
            <option value="white">White</option>
            <option value="grey">Grey</option>
            <option value="black">Black</option>
        </select>
    </div>
</div>

<div class="container-fluid p-0 @($"theme-{currentTheme}")">
    <div class="row mb-3 align-items-end">
        <div class="col-auto">
            <label for="startDate" class="form-label mb-1">Date:</label>
            <input type="date" class="form-control" id="startDate" @bind="startDate" style="width: auto;">
        </div>
        <div class="col-auto">
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="LoadReport" disabled="@loading" style="min-width: 150px;">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Loading...</span>
                    }
                    else
                    {
                        <span>Generate Report</span>
                    }
                </button>
                @if (loading)
                {
                    <button class="btn btn-danger" @onclick="CancelLoad">
                        <span>Cancel</span>
                    </button>
                }
                @if (poolDetails != null && poolDetails.Any() && !loading)
                {
                    <button class="btn btn-success" @onclick="ExportToExcel" disabled="@exportingToExcel">
                        @if (exportingToExcel)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-2">Exporting...</span>
                        }
                        else
                        {
                            <span>Export to Excel</span>
                        }
                    </button>
                }
            </div>
        </div>
        <div class="col">
            @if (poolDetails != null && poolDetails.Any())
            {
                <div class="text-end">
                    <span class="badge bg-info text-dark fs-6">Found @poolDetails.Count records</span>
                    <span class="badge bg-secondary fs-6 ms-2">Date Range: @poolDetails.Min(p => p.StartDate).ToString("MM/dd/yyyy") - @poolDetails.Max(p => p.StartDate).ToString("MM/dd/yyyy")</span>
                </div>
            }
        </div>
    </div>

    @if (exportingToExcel)
    {
        <div class="row mt-3">
            <div class="col">
                <div class="alert alert-info d-flex align-items-center" role="alert">
                    <div class="spinner-border text-info me-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div>
                        <strong>Exporting to Excel...</strong><br />
                        <small>This may take a moment for large datasets. Please wait...</small>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (errorMessage != null)
    {
        <div class="row mt-4">
            <div class="col">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>Error:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                </div>
            </div>
        </div>
    }

    @if (loading)
    {
        <div class="row mt-4">
            <div class="col">
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" 
                         style="width: 100%">
                        Loading Data...
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row mt-4">
            <div class="col">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>Error:</strong> @errorMessage
                    <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
                </div>
            </div>
        </div>
    }

    @if (poolDetails != null && poolDetails.Any())
    {
        <div class="row mt-4">
            <div class="col">
                <div class="row mb-3">
                    <div class="col-auto">
                        <label for="siteFilter" class="form-label">Filter by Site:</label>
                        <select id="siteFilter" class="form-select form-select-sm" value="@selectedSiteName" @onchange="OnSiteFilterChanged" style="width: auto; min-width: 200px;">
                            <option value="">All Sites</option>
                            @foreach (var site in GetUniqueSites())
                            {
                                <option value="@site.SiteName">@site.SiteID - @site.SiteName</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col d-flex justify-content-between align-items-center">
                        <div>
                            Show
                            <select class="form-select-sm mx-2 d-inline-block w-auto" value="@pageSize" @onchange="OnPageSizeChanged">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                            entries
                        </div>
                        <div>
                            <input type="search" class="form-control form-control-sm" 
                                   placeholder="Search..." 
                                   @bind="searchText" 
                                   @bind:event="oninput" />
                        </div>
                    </div>
                </div>

                <div class="mt-3 table-responsive" style="height: 600px;">
                    <table class="table table-striped table-bordered table-sm">
                        <thead class="sticky-top bg-white">
                            <tr>
                                <th>Site ID</th>
                                <th>Site Name</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Pool</th>
                                <th>Zone</th>
                                <th>Wagered</th>
                                <th>Total Won</th>
                                <th>Total Commission</th>
                                <th>Payout %</th>
                                <th>Takeout %</th>
                                <th>Open Pari Pool Value</th>
                                <th>Transfer In</th>
                                <th>Transfer Out</th>
                                <th>Daily Net Pool Change</th>
                                <th>Parimutuel Pool Value</th>
                                <th>Allocated</th>
                                <th>Site State</th>
                            </tr>
                        </thead>
                        <Virtualize Items="@PagedRecords" Context="detail" ItemSize="33" TItem="PoolDetail">
                            <tbody>
                                <tr>
                                    <td>@detail.SiteID</td>
                                    <td>@detail.SiteName</td>
                                    <td>@detail.StartDate.ToShortDateString()</td>
                                    <td>@detail.EndDate.ToShortDateString()</td>
                                    <td>@detail.Pool</td>
                                    <td>@detail.Zone</td>
                                    <td>@detail.Wagered.ToString("C")</td>
                                    <td>@detail.TotalWon.ToString("C")</td>
                                    <td>@detail.TotalCommission.ToString("C")</td>
                                    <td>@detail.iPayoutPercent.ToString("N2")%</td>
                                    <td>@detail.iTakeoutPercent.ToString("N2")%</td>
                                    <td>@detail.OpenPariPoolValue.ToString("C")</td>
                                    <td>@detail.TransferIn.ToString("C")</td>
                                    <td>@detail.TransferOut.ToString("C")</td>
                                    <td>@detail.DailyNetPoolChange.ToString("C")</td>
                                    <td>@detail.ParimutuelPoolValue.ToString("C")</td>
                                    <td>@detail.Allocated.ToString("C")</td>
                                    <td>@detail.strSiteState</td>
                                </tr>
                            </tbody>
                        </Virtualize>
                    </table>
                </div>

                <div class="row mt-3">
                    <div class="col">
                        <nav>
                            <ul class="pagination justify-content-end">
                                @{
                                    var totalPages = (int)Math.Ceiling(FilteredRecords.Count() / (double)pageSize);
                                    var startPage = Math.Max(1, currentPage - 2);
                                    var endPage = Math.Min(totalPages, startPage + 4);
                                }
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">First</button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                                </li>
                                @for (int i = startPage; i <= endPage; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
                                </li>
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(totalPages)" disabled="@(currentPage == totalPages)">Last</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (showTimer)
    {
        <div class="timer-container">
            @if (loading)
            {
                <div class="spinner"></div>
                <span class="timer-label">Executing:</span>
            }
            else
            {
                <span class="timer-label">@timerStatus</span>
            }
            <span class="timer-value">@elapsedTime</span>
        </div>
    }
</div>

@code {
    private DateTime startDate = DateTime.Today;
    private List<PoolDetail>? poolDetails;
    private bool loading = false;
    private CancellationTokenSource? _cancellationTokenSource;
    
    private int pageSize = 25;
    private int currentPage = 1;
    private string searchText = "";
    private string selectedSiteName = "";
    private string currentTheme = "white";
    private bool exportingToExcel = false;
    

    private List<PoolDetail> FilteredRecords => 
        (poolDetails?.Where(detail =>
            (string.IsNullOrWhiteSpace(selectedSiteName) || detail.SiteName == selectedSiteName) &&
            (string.IsNullOrWhiteSpace(searchText) ||
            (detail.SiteName?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
            detail.SiteID.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            (detail.Pool?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (detail.Zone?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (detail.strSiteState?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false))
        ) ?? Enumerable.Empty<PoolDetail>()).ToList();
    
    private List<PoolDetail> PagedRecords => 
        FilteredRecords.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

    protected override void OnParametersSet()
    {
        // Reset to first page when search text changes
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            currentPage = 1;
        }
    }

    private void CancelLoad()
    {
        _cancellationTokenSource?.Cancel();
        loading = false;
        StateHasChanged();
    }

    private void GoToPage(int page)
    {
        if (poolDetails == null || !poolDetails.Any()) return;
        
        var totalPages = (int)Math.Ceiling(FilteredRecords.Count() / (double)pageSize);
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        var totalPages = (int)Math.Ceiling(FilteredRecords.Count() / (double)pageSize);
        if (currentPage < totalPages)
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when page size changes
            StateHasChanged();
        }
    }

    private void OnSiteFilterChanged(ChangeEventArgs e)
    {
        selectedSiteName = e.Value?.ToString() ?? "";
        currentPage = 1; // Reset to first page when filter changes
        StateHasChanged();
    }

    private async Task OnThemeChanged(ChangeEventArgs e)
    {
        currentTheme = e.Value?.ToString() ?? "white";
        await ApplyTheme();
        StateHasChanged();
    }

    private async Task ApplyTheme()
    {
        await JSRuntime.InvokeVoidAsync("applyTheme", currentTheme);
    }

    private List<(int SiteID, string SiteName)> GetUniqueSites()
    {
        if (poolDetails == null) return new List<(int, string)>();
        
        return poolDetails
            .Where(p => !string.IsNullOrWhiteSpace(p.SiteName))
            .GroupBy(p => new { p.SiteID, p.SiteName })
            .Select(g => (g.Key.SiteID, g.Key.SiteName!))
            .OrderBy(s => s.SiteID)
            .ToList();
    }

    private async Task ExportToExcel()
    {
        try
        {
            if (poolDetails == null || !poolDetails.Any())
                return;

            exportingToExcel = true;
            StateHasChanged(); // Update UI to show loading state
            
            // Add a small delay to ensure UI updates
            await Task.Delay(100);

            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Pool Details");

                // Add headers
                worksheet.Cells[1, 1].Value = "Site ID";
                worksheet.Cells[1, 2].Value = "Site Name";
                worksheet.Cells[1, 3].Value = "Start Date";
                worksheet.Cells[1, 4].Value = "End Date";
                worksheet.Cells[1, 5].Value = "Pool";
                worksheet.Cells[1, 6].Value = "Zone";
                worksheet.Cells[1, 7].Value = "Wagered";
                worksheet.Cells[1, 8].Value = "Total Won";
                worksheet.Cells[1, 9].Value = "Total Commission";
                worksheet.Cells[1, 10].Value = "Payout %";
                worksheet.Cells[1, 11].Value = "Takeout %";
                worksheet.Cells[1, 12].Value = "Open Pari Pool Value";
                worksheet.Cells[1, 13].Value = "Transfer In";
                worksheet.Cells[1, 14].Value = "Transfer Out";
                worksheet.Cells[1, 15].Value = "Daily Net Pool Change";
                worksheet.Cells[1, 16].Value = "Parimutuel Pool Value";
                worksheet.Cells[1, 17].Value = "Allocated";
                worksheet.Cells[1, 18].Value = "Site State";

                // Format headers
                using (var range = worksheet.Cells[1, 1, 1, 18])
                {
                    range.Style.Font.Bold = true;
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                    range.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                }

                // Get data to export (filtered data)
                var dataToExport = FilteredRecords;

                // Add data
                int row = 2;
                foreach (var detail in dataToExport)
                {
                    worksheet.Cells[row, 1].Value = detail.SiteID;
                    worksheet.Cells[row, 2].Value = detail.SiteName;
                    worksheet.Cells[row, 3].Value = detail.StartDate;
                    worksheet.Cells[row, 3].Style.Numberformat.Format = "mm/dd/yyyy";
                    worksheet.Cells[row, 4].Value = detail.EndDate;
                    worksheet.Cells[row, 4].Style.Numberformat.Format = "mm/dd/yyyy";
                    worksheet.Cells[row, 5].Value = detail.Pool;
                    worksheet.Cells[row, 6].Value = detail.Zone;
                    worksheet.Cells[row, 7].Value = detail.Wagered;
                    worksheet.Cells[row, 7].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 8].Value = detail.TotalWon;
                    worksheet.Cells[row, 8].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 9].Value = detail.TotalCommission;
                    worksheet.Cells[row, 9].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 10].Value = detail.iPayoutPercent / 100;
                    worksheet.Cells[row, 10].Style.Numberformat.Format = "0.00%";
                    worksheet.Cells[row, 11].Value = detail.iTakeoutPercent / 100;
                    worksheet.Cells[row, 11].Style.Numberformat.Format = "0.00%";
                    worksheet.Cells[row, 12].Value = detail.OpenPariPoolValue;
                    worksheet.Cells[row, 12].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 13].Value = detail.TransferIn;
                    worksheet.Cells[row, 13].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 14].Value = detail.TransferOut;
                    worksheet.Cells[row, 14].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 15].Value = detail.DailyNetPoolChange;
                    worksheet.Cells[row, 15].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 16].Value = detail.ParimutuelPoolValue;
                    worksheet.Cells[row, 16].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 17].Value = detail.Allocated;
                    worksheet.Cells[row, 17].Style.Numberformat.Format = "$#,##0.00";
                    worksheet.Cells[row, 18].Value = detail.strSiteState;
                    row++;
                }

                // Auto-fit columns
                worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                // Convert to byte array
                var fileBytes = package.GetAsByteArray();

                // Create filename with date
                var fileName = $"PoolDetails_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";

                // Use JavaScript to trigger download
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
                
                // Show success message briefly
                errorMessage = null;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting to Excel");
            errorMessage = "Error exporting to Excel: " + ex.Message;
        }
        finally
        {
            exportingToExcel = false;
            StateHasChanged();
        }
    }
}